"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  MONITOR DE PRE√áOS - MINIATURAS F1 1/43 McDONALD'S - MERCADO LIVRE          ‚ïë
‚ïë  Vers√£o: 4.0 - Sistema Unificado com Auto-Login                             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""

import requests
from bs4 import BeautifulSoup
from collections import defaultdict
import time
import smtplib
from email.message import EmailMessage
import datetime
import os
import random
import re
import json
import logging
from typing import List, Dict, Optional
from urllib.parse import quote_plus, urljoin, urlparse

# Selenium imports
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import imaplib
import email as email_lib
from email.header import decode_header

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CONFIGURA√á√ÉO DE LOGGING (APENAS TERMINAL)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def configurar_logging():
    """Configura sistema de logging apenas para terminal"""
    
    logger = logging.getLogger("MLMonitor")
    logger.setLevel(logging.INFO)
    logger.handlers.clear()
    
    # Formato com √≠cones
    console_formatter = logging.Formatter(
        '[%(asctime)s] %(levelname_icon)s %(message)s',
        datefmt='%H:%M:%S'
    )
    
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(console_formatter)
    
    # Adicionar √≠cones
    class IconFilter(logging.Filter):
        ICONS = {
            'DEBUG': 'üîç',
            'INFO': '‚ÑπÔ∏è ',
            'WARNING': '‚ö†Ô∏è ',
            'ERROR': '‚ùå',
            'CRITICAL': 'üö®'
        }
        
        def filter(self, record):
            record.levelname_icon = self.ICONS.get(record.levelname, '‚Ä¢')
            return True
    
    console_handler.addFilter(IconFilter())
    logger.addHandler(console_handler)
    
    return logger

logger = configurar_logging()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CONFIGURA√á√ïES GLOBAIS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

CONFIG = {
    # Credenciais (MOVA PARA VARI√ÅVEIS DE AMBIENTE EM PRODU√á√ÉO!)
    'email_ml': os.environ.get('EMAIL_APP_M'),
    'senha_app_ml': os.environ.get('SENHA_APP_M'),
    'email_destino': os.environ.get('EMAIL_APP_P'),
    'senha_app_destino': os.environ.get('SENHA_APP_P'),
    
    # URL espec√≠fica para monitorar
    'url_base': 'https://lista.mercadolivre.com.br/mc-donalds-f1-1%2F43',
    
    # Debug
    'chrome_headless': False,  # True = invis√≠vel, False = vis√≠vel
    'salvar_html_debug': True,  # Salvar HTML para an√°lise
    'forcar_selenium': False,  # True = sempre usar Selenium (para testar)
    
    # Filtros de produtos
    'termos_obrigatorios': ["1/43", "1:43"],
    'termos_relevantes': ["f1", "formula 1", "mcdonald"],
    
    # Exclus√µes
    'exclusoes_titulo': ["hot wheels", "mclaren f1-mcl36"],
    'exclusoes_id': ["mlb-1929640090", "mlb22449590", "mlb5466709978"],
    
    # Par√¢metros de busca
    'max_paginas': 5,
    'produtos_por_pagina': 50,
    'numero_itens_email': 5,
    
    # Categoriza√ß√£o
    'padroes_preto': ["apxgp", "preto", "expensity", "cor apx", "modelo apxgp", "expensify"],
    'padroes_vermelho': ["vermelho", "automac", "app", "automaq", "maisto", "modelo vermelho"],
    'padroes_dupla': ["set 2un", "kit 2x", "kit c/2", "dupla", "2x miniatura", "kit com 2"],
    
    # Configura√ß√µes de rede
    'timeout': 20,
    'delay_entre_paginas': (2, 4),
    'delay_entre_tentativas': 6,
    'max_tentativas': 4,
}

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# M√ìDULO DE AUTO-LOGIN (SELENIUM)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

class AutoLogin:
    """Gerencia login autom√°tico no Mercado Livre"""
    
    def __init__(self, email: str, senha_app: str):
        self.email = email
        self.senha_app = senha_app
        self.driver = None
    
    def esperar_natural(self, min_seg=1, max_seg=3):
        """Delay natural"""
        time.sleep(random.uniform(min_seg, max_seg))
    
    def configurar_driver(self):
        """Configura driver Chrome anti-detec√ß√£o"""
        logger.info("Configurando Chrome...")
        
        options = Options()
        
        # Detectar ambiente CI/CD
        is_ci = os.environ.get('CI') == 'true' or os.environ.get('GITHUB_ACTIONS') == 'true'
        
        if is_ci:
            logger.info("ü§ñ Ambiente CI/CD detectado - configurando headless")
            options.add_argument('--headless=new')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--disable-software-rasterizer')
            options.add_argument('--disable-extensions')
            options.add_argument('--window-size=1920,1080')
        elif CONFIG.get('chrome_headless', False):
            options.add_argument('--headless=new')
            logger.info("Modo headless ativado")
        else:
            logger.info("Modo vis√≠vel ativado - voc√™ ver√° o navegador")
        
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        
        try:
            driver = webdriver.Chrome(options=options)
            
            # Tentar executar script anti-detec√ß√£o (pode falhar no CI)
            try:
                driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
                logger.info("‚úÖ Script anti-detec√ß√£o aplicado")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Script anti-detec√ß√£o falhou (normal no CI): {str(e)[:100]}")
            
            self.driver = driver
            logger.info("‚úÖ Chrome configurado")
            
        except Exception as e:
            logger.error(f"Erro ao configurar Chrome: {e}")
            raise
    
    # Substitua o m√©todo fazer_login() na classe AutoLogin por este:

    def fazer_login(self, url: str) -> bool:
    """Executa processo completo de login"""
    
    try:
        logger.info("üîê Iniciando processo de login...")
        
        is_ci = os.environ.get('CI') == 'true' or os.environ.get('GITHUB_ACTIONS') == 'true'
        
        # Acessar p√°gina
        logger.info("Acessando Mercado Livre...")
        self.driver.get(url)
        
        if not is_ci:
            self.driver.maximize_window()
        
        self.esperar_natural(2, 4)
        
        if is_ci:
            try:
                os.makedirs('debug_temp', exist_ok=True)
                self.driver.save_screenshot('debug_temp/login_step1.png')
                logger.info("üì∏ Screenshot salvo: login_step1.png")
            except:
                pass
        
        # Clicar em "J√° tenho conta"
        logger.info("Clicando em 'J√° tenho conta'...")
        try:
            ja_tenho_conta = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'J√° tenho conta')] | //span[contains(text(), 'J√° tenho conta')]"))
            )
            ja_tenho_conta.click()
        except Exception as e:
            logger.warning(f"Bot√£o 'J√° tenho conta' n√£o encontrado: {e}")
        
        self.esperar_natural(1, 2)
        
        if is_ci:
            try:
                self.driver.save_screenshot('debug_temp/login_step2.png')
                logger.info("üì∏ Screenshot salvo: login_step2.png")
            except:
                pass
        
        # Inserir email
        logger.info("Inserindo email...")
        email_field = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.ID, "user_id"))
        )
        email_field.clear()
        
        for char in self.email:
            email_field.send_keys(char)
            time.sleep(random.uniform(0.05, 0.15))
        
        self.esperar_natural(1, 2)
        
        if is_ci:
            try:
                self.driver.save_screenshot('debug_temp/login_step3.png')
                logger.info("üì∏ Screenshot salvo: login_step3.png")
            except:
                pass
        
        # Clicar em "Continuar"
        logger.info("Clicando em 'Continuar'...")
        continuar_btn = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[@type='submit'] | //button[contains(text(), 'Continuar')]"))
        )
        continuar_btn.click()
        self.esperar_natural(2, 4)
        
        if is_ci:
            try:
                self.driver.save_screenshot('debug_temp/login_step4.png')
                with open('debug_temp/login_step4.html', 'w', encoding='utf-8') as f:
                    f.write(self.driver.page_source)
                logger.info("üì∏ Screenshot e HTML salvos: login_step4")
            except:
                pass
        
        # ===== CORRE√á√ÉO PRINCIPAL: M√∫ltiplas estrat√©gias para solicitar c√≥digo =====
        logger.info("Solicitando c√≥digo por email...")
        
        # Estrat√©gia 1: Tentar m√∫ltiplos seletores
        seletores_botao = [
            "//button[contains(text(), 'Enviar c√≥digo')]",
            "//button[contains(text(), 'c√≥digo')]",
            "//button[contains(@class, 'andes-button')]",
            "//*[@id='code_validation']//button",
            "//button[@type='button']",
            "//span[contains(text(), 'Enviar')]//ancestor::button",
        ]
        
        botao_encontrado = False
        
        for idx, seletor in enumerate(seletores_botao, 1):
            try:
                logger.info(f"üîç Tentando seletor {idx}/{len(seletores_botao)}: {seletor}")
                enviar_codigo = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, seletor))
                )
                enviar_codigo.click()
                logger.info(f"‚úÖ C√≥digo solicitado (seletor {idx})!")
                botao_encontrado = True
                break
            except:
                continue
        
        # Estrat√©gia 2: Tentar via JavaScript
        if not botao_encontrado:
            logger.warning("‚ö†Ô∏è Nenhum seletor funcionou, tentando JS...")
            try:
                # Buscar todos os bot√µes
                botoes = self.driver.find_elements(By.TAG_NAME, "button")
                logger.info(f"üîç Encontrados {len(botoes)} bot√µes na p√°gina")
                
                # Tentar clicar em bot√µes que possam ser o de c√≥digo
                for i, botao in enumerate(botoes):
                    try:
                        texto = botao.text.lower()
                        if any(palavra in texto for palavra in ['c√≥digo', 'enviar', 'email']):
                            logger.info(f"üéØ Tentando bot√£o {i+1}: '{botao.text[:50]}'")
                            self.driver.execute_script("arguments[0].click();", botao)
                            logger.info("‚úÖ C√≥digo solicitado via JS!")
                            botao_encontrado = True
                            break
                    except:
                        continue
            except Exception as e:
                logger.error(f"Erro na estrat√©gia JS: {e}")
        
        # Estrat√©gia 3: Verificar se j√° est√° na tela de c√≥digo
        if not botao_encontrado:
            logger.warning("‚ö†Ô∏è Bot√£o n√£o encontrado, verificando se j√° estamos na tela de c√≥digo...")
            try:
                # Procurar campos de d√≠gitos
                campos_digitos = self.driver.find_elements(By.CSS_SELECTOR, 'input[aria-label*="D√≠gito"]')
                if campos_digitos:
                    logger.info("‚úÖ Tela de c√≥digo j√° est√° vis√≠vel! Continuando...")
                    botao_encontrado = True
                else:
                    logger.error("‚ùå Tela de c√≥digo n√£o encontrada")
            except:
                pass
        
        if not botao_encontrado:
            logger.error("‚ùå Falha ao solicitar c√≥digo por todas as estrat√©gias")
            if is_ci:
                try:
                    self.driver.save_screenshot('debug_temp/login_error.png')
                    with open('debug_temp/login_error.html', 'w', encoding='utf-8') as f:
                        f.write(self.driver.page_source)
                    logger.info("üíæ Erro salvo: login_error.png e login_error.html")
                except:
                    pass
            return False
        
        self.esperar_natural(2, 3)
        
        if is_ci:
            try:
                self.driver.save_screenshot('debug_temp/login_step5.png')
                logger.info("üì∏ Screenshot salvo: login_step5.png")
            except:
                pass
        
        # Buscar c√≥digo via IMAP
        logger.info("üìß Buscando c√≥digo no email...")
        codigo = self.buscar_codigo_imap()
        
        if not codigo:
            logger.error("‚ùå C√≥digo n√£o encontrado no email")
            return False
        
        logger.info(f"üéØ C√≥digo encontrado: {codigo}")
        
        # Inserir c√≥digo
        if not self.inserir_codigo(codigo):
            return False
        
        logger.info("‚úÖ Login conclu√≠do com sucesso!")
        self.esperar_natural(3, 5)
        
        return True
        
    except Exception as e:
        logger.error(f"Erro no login: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False
    
    def buscar_codigo_imap(self) -> Optional[str]:
        """Busca c√≥digo de verifica√ß√£o via IMAP"""
        
        try:
            imap = imaplib.IMAP4_SSL("imap.gmail.com")
            senha_limpa = self.senha_app.replace(" ", "")
            imap.login(self.email, senha_limpa)
            imap.select("INBOX")
            
            max_tentativas = 8
            
            for tentativa in range(1, max_tentativas + 1):
                logger.info(f"üîç Tentativa {tentativa}/{max_tentativas}")
                
                _, messages = imap.search(None, 'ALL')
                
                if messages[0]:
                    email_ids = messages[0].split()
                    ultimos_emails = email_ids[-5:] if len(email_ids) >= 5 else email_ids
                    
                    for email_id in reversed(ultimos_emails):
                        try:
                            _, msg_data = imap.fetch(email_id, "(RFC822)")
                            email_body = msg_data[0][1]
                            email_message = email_lib.message_from_bytes(email_body)
                            
                            from_header = email_message.get("From", "")
                            
                            # Verificar se √© do Mercado Livre
                            if not any(x in from_header.lower() for x in ['mercadolivre', 'mercado livre', 'noreply']):
                                continue
                            
                            # Extrair corpo
                            body = ""
                            if email_message.is_multipart():
                                for part in email_message.walk():
                                    if part.get_content_type() in ["text/plain", "text/html"]:
                                        try:
                                            payload = part.get_payload(decode=True)
                                            if payload:
                                                body += payload.decode('utf-8', errors='ignore')
                                        except:
                                            pass
                            else:
                                try:
                                    payload = email_message.get_payload(decode=True)
                                    if payload:
                                        body = payload.decode('utf-8', errors='ignore')
                                except:
                                    pass
                            
                            # Procurar c√≥digo de 6 d√≠gitos
                            match = re.search(r'[Nn][√£a]o compartilhe.*?(\d{6})', body, re.DOTALL | re.IGNORECASE)
                            if match:
                                imap.close()
                                imap.logout()
                                return match.group(1)
                            
                            codigos = re.findall(r'\b(\d{6})\b', body)
                            if codigos:
                                imap.close()
                                imap.logout()
                                return codigos[-1]
                        
                        except:
                            continue
                
                if tentativa < max_tentativas:
                    time.sleep(8)
            
            imap.close()
            imap.logout()
            return None
            
        except Exception as e:
            logger.error(f"Erro ao buscar c√≥digo via IMAP: {e}")
            return None
    
    def inserir_codigo(self, codigo: str) -> bool:
        """Insere c√≥digo de verifica√ß√£o"""
        
        try:
            logger.info("üìù Inserindo c√≥digo...")
            
            for i, digito in enumerate(codigo):
                campo = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, f'input[aria-label="D√≠gito {i+1}"]'))
                )
                campo.clear()
                campo.send_keys(digito)
                time.sleep(random.uniform(0.2, 0.4))
            
            self.esperar_natural(1, 2)
            
            # Clicar em confirmar
            try:
                botao_confirmar = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, 'button[data-testid="submit-button"]'))
                )
                botao_confirmar.click()
            except:
                botao_confirmar = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, 'button[type="submit"]'))
                )
                botao_confirmar.click()
            
            logger.info("‚úÖ C√≥digo confirmado!")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao inserir c√≥digo: {e}")
            return False
    
    def obter_cookies(self) -> dict:
        """Obt√©m cookies da sess√£o autenticada"""
        
        cookies = {}
        for cookie in self.driver.get_cookies():
            cookies[cookie['name']] = cookie['value']
        return cookies
    
    def fechar(self):
        """Fecha o driver"""
        if self.driver:
            self.driver.quit()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CLASSE PARA GERENCIAR SCRAPING
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

class MercadoLivreScraper:
    """Gerencia scraping do Mercado Livre com auto-login"""
    
    def __init__(self):
        self.session = self._criar_sessao()
        self.cookies_inicializados = False
        self.auto_login = None
        self.tentativas_totais = 0
        self.paginas_sucesso = 0
        self.paginas_falha = 0
    
    def _criar_sessao(self) -> requests.Session:
        """Cria sess√£o HTTP com headers realistas"""
        
        session = requests.Session()
        
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
        ]
        
        headers = {
            'User-Agent': random.choice(user_agents),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'identity',  # FOR√áAR SEM COMPRESS√ÉO
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'DNT': '1',
        }
        
        session.headers.update(headers)
        logger.info("üì° Sess√£o HTTP criada (sem compress√£o)")
        return session
    
    def verificar_bloqueio(self, url: str) -> bool:
        """Verifica se URL indica bloqueio/verifica√ß√£o"""
        return "account-verification" in url or "security" in url
    
    def executar_login(self, url_bloqueio: str) -> bool:
        """Executa processo de login via Selenium"""
        
        logger.warning("üîê Bloqueio detectado! Iniciando login autom√°tico...")
        
        self.auto_login = AutoLogin(
            CONFIG['email_ml'],
            CONFIG['senha_app_ml']
        )
        
        self.auto_login.configurar_driver()
        
        if self.auto_login.fazer_login(url_bloqueio):
            # Transferir cookies para a sess√£o requests
            cookies = self.auto_login.obter_cookies()
            
            for name, value in cookies.items():
                self.session.cookies.set(name, value)
            
            logger.info("‚úÖ Cookies transferidos para sess√£o HTTP")
            # N√ÉO FECHAR O DRIVER - vamos continuar usando ele
            logger.info("üåê Mantendo navegador aberto para continuar busca")
            return True
        else:
            self.auto_login.fechar()
            return False
    
    def buscar_pagina(self, url: str, pagina_num: int, tentativa: int = 1) -> Optional[BeautifulSoup]:
        """Busca uma p√°gina com retry e auto-login se necess√°rio"""
        
        self.tentativas_totais += 1
        
        logger.info(f"Buscando p√°gina {pagina_num} (tentativa {tentativa}/{CONFIG['max_tentativas']})")
        
        # Se j√° temos Selenium aberto e autenticado, usar ele
        if self.auto_login and self.auto_login.driver:
            logger.info("üåê Usando Selenium autenticado")
            try:
                self.auto_login.driver.get(url)
                self.auto_login.esperar_natural(2, 4)
                
                # Verificar se foi bloqueado novamente
                if self.verificar_bloqueio(self.auto_login.driver.current_url):
                    logger.error("‚ùå Bloqueio persistiu mesmo com Selenium autenticado")
                    self.paginas_falha += 1
                    return None
                
                # Capturar HTML
                html_content = self.auto_login.driver.page_source
                
                # Salvar para debug
                if CONFIG.get('salvar_html_debug', False):
                    os.makedirs('debug_temp', exist_ok=True)
                    filename = f'debug_temp/selenium_pagina_{pagina_num}_tent{tentativa}.html'
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(html_content)
                    logger.info(f"üíæ HTML do Selenium salvo: {filename}")
                
                # Parse HTML
                try:
                    soup = BeautifulSoup(html_content, 'lxml')
                except:
                    soup = BeautifulSoup(html_content, 'html.parser')
                
                self.paginas_sucesso += 1
                logger.info(f"‚úÖ P√°gina {pagina_num} carregada via Selenium")
                return soup
                
            except Exception as e:
                logger.error(f"Erro ao usar Selenium: {e}")
                if tentativa < CONFIG['max_tentativas']:
                    return self.buscar_pagina(url, pagina_num, tentativa + 1)
                self.paginas_falha += 1
                return None
        
        # MODO DEBUG: For√ßar uso do Selenium
        if CONFIG.get('forcar_selenium', False) and tentativa == 1:
            logger.warning("üîß MODO DEBUG: For√ßando uso do Selenium...")
            url_teste = CONFIG['url_base'] if pagina_num == 1 else url
            
            # Simular bloqueio para acionar login
            if not self.auto_login:
                logger.info("üåê Abrindo navegador Chrome...")
                self.auto_login = AutoLogin(CONFIG['email_ml'], CONFIG['senha_app_ml'])
                self.auto_login.configurar_driver()
                
                logger.info(f"üìç Navegando para: {url_teste}")
                self.auto_login.driver.get(url_teste)
                
                logger.info("‚è∏Ô∏è  Aguardando 30 segundos para voc√™ analisar a p√°gina...")
                logger.info("üí° Verifique se h√° bloqueio ou se a p√°gina carregou corretamente")
                time.sleep(30)
                
                # Capturar HTML do Selenium
                html_selenium = self.auto_login.driver.page_source
                
                # Salvar para debug
                if CONFIG.get('salvar_html_debug', False):
                    os.makedirs('debug_temp', exist_ok=True)
                    filename = f'debug_temp/selenium_pagina_{pagina_num}.html'
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(html_selenium)
                    logger.info(f"üíæ HTML do Selenium salvo em: {filename}")
                
                # Transferir cookies
                cookies = self.auto_login.obter_cookies()
                for name, value in cookies.items():
                    self.session.cookies.set(name, value)
                
                logger.info("‚úÖ Cookies transferidos do Selenium")
        
        try:
            if tentativa > 1:
                delay = tentativa * CONFIG['delay_entre_tentativas']
                logger.info(f"‚è≥ Aguardando {delay}s...")
                time.sleep(delay)
            
            inicio = time.time()
            response = self.session.get(url, timeout=CONFIG['timeout'], allow_redirects=True)
            duracao = time.time() - inicio
            
            logger.info(f"Status: {response.status_code} | Tempo: {duracao:.2f}s")
            
            # DESCOMPRIMIR CONTE√öDO SE NECESS√ÅRIO
            content_encoding = response.headers.get('content-encoding', '').lower()
            if content_encoding or not response.text.strip().startswith('<'):
                logger.info(f"üîÑ Tentando descomprimir conte√∫do (encoding: {content_encoding})...")
                
                import gzip
                import zlib
                
                # Tentar m√∫ltiplos m√©todos de descompress√£o
                decompressed = False
                
                # M√©todo 1: gzip
                try:
                    decompressed_content = gzip.decompress(response.content)
                    response._content = decompressed_content
                    response.encoding = 'utf-8'
                    logger.info(f"‚úÖ Descomprimido com GZIP: {len(decompressed_content)} bytes")
                    decompressed = True
                except:
                    pass
                
                # M√©todo 2: deflate
                if not decompressed:
                    try:
                        decompressed_content = zlib.decompress(response.content)
                        response._content = decompressed_content
                        response.encoding = 'utf-8'
                        logger.info(f"‚úÖ Descomprimido com DEFLATE: {len(decompressed_content)} bytes")
                        decompressed = True
                    except:
                        pass
                
                # M√©todo 3: deflate raw
                if not decompressed:
                    try:
                        decompressed_content = zlib.decompress(response.content, -zlib.MAX_WBITS)
                        response._content = decompressed_content
                        response.encoding = 'utf-8'
                        logger.info(f"‚úÖ Descomprimido com DEFLATE-RAW: {len(decompressed_content)} bytes")
                        decompressed = True
                    except:
                        pass
                
                if not decompressed:
                    logger.warning("‚ö†Ô∏è N√£o foi poss√≠vel descomprimir o conte√∫do")
            
            # VERIFICAR BLOQUEIO
            if self.verificar_bloqueio(response.url):
                logger.warning("üö´ BLOQUEIO DETECTADO!")
                logger.info(f"URL de bloqueio: {response.url}")
                
                # Executar login apenas na primeira tentativa de bloqueio
                if tentativa == 1:
                    if self.executar_login(response.url):
                        logger.info("‚úÖ Login conclu√≠do! Continuando com Selenium...")
                        # Tentar novamente, mas agora vai usar Selenium
                        return self.buscar_pagina(url, pagina_num, tentativa + 1)
                    else:
                        logger.error("‚ùå Falha no login autom√°tico")
                        self.paginas_falha += 1
                        return None
                else:
                    logger.error("‚ùå Bloqueio persistiu ap√≥s login")
                    self.paginas_falha += 1
                    return None
            
            # Verificar status codes
            if response.status_code == 403:
                logger.error("üö´ HTTP 403: Acesso negado")
                if tentativa < CONFIG['max_tentativas']:
                    return self.buscar_pagina(url, pagina_num, tentativa + 1)
                self.paginas_falha += 1
                return None
            
            if response.status_code == 429:
                logger.error("üö´ HTTP 429: Rate limit excedido")
                time.sleep(10)
                if tentativa < CONFIG['max_tentativas']:
                    return self.buscar_pagina(url, pagina_num, tentativa + 1)
                self.paginas_falha += 1
                return None
            
            if response.status_code != 200:
                logger.error(f"HTTP {response.status_code}")
                if tentativa < CONFIG['max_tentativas']:
                    return self.buscar_pagina(url, pagina_num, tentativa + 1)
                self.paginas_falha += 1
                return None
            
            # Parse HTML
            try:
                soup = BeautifulSoup(response.text, 'lxml')
            except:
                soup = BeautifulSoup(response.text, 'html.parser')
            
            # DEBUG: Salvar HTML para an√°lise
            if CONFIG.get('salvar_html_debug', False):
                try:
                    os.makedirs('debug_temp', exist_ok=True)
                    filename = f'debug_temp/pagina_{pagina_num}_tent{tentativa}.html'
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(response.text)
                    logger.info(f"üîç HTML salvo em: {filename}")
                    
                    # Mostrar preview do HTML
                    preview = response.text[:500]
                    logger.info(f"üìÑ Preview HTML: {preview}...")
                    
                    # Verificar se parece ser uma p√°gina v√°lida
                    if '<html' not in response.text.lower():
                        logger.warning("‚ö†Ô∏è Resposta n√£o parece ser HTML v√°lido!")
                    
                    # Contar elementos importantes
                    num_divs = response.text.count('<div')
                    num_links = response.text.count('<a ')
                    logger.info(f"üìä Elementos no HTML: {num_divs} divs, {num_links} links")
                    
                except Exception as e:
                    logger.warning(f"Erro ao salvar debug: {e}")
            
            self.paginas_sucesso += 1
            logger.info(f"‚úÖ P√°gina {pagina_num} carregada com sucesso")
            
            return soup
            
        except requests.exceptions.Timeout:
            logger.error(f"‚è±Ô∏è Timeout na requisi√ß√£o")
            if tentativa < CONFIG['max_tentativas']:
                return self.buscar_pagina(url, pagina_num, tentativa + 1)
            self.paginas_falha += 1
            return None
            
        except Exception as e:
            logger.error(f"Erro: {e}")
            if tentativa < CONFIG['max_tentativas']:
                return self.buscar_pagina(url, pagina_num, tentativa + 1)
            self.paginas_falha += 1
            return None
    
    def get_stats(self) -> dict:
        """Retorna estat√≠sticas do scraper"""
        return {
            'tentativas_totais': self.tentativas_totais,
            'paginas_sucesso': self.paginas_sucesso,
            'paginas_falha': self.paginas_falha,
            'taxa_sucesso': f"{(self.paginas_sucesso / max(self.tentativas_totais, 1) * 100):.1f}%"
        }
    
    def fechar(self):
        """Fecha recursos do scraper"""
        if self.auto_login:
            logger.info("üîí Fechando navegador Selenium...")
            self.auto_login.fechar()
            self.auto_login = None

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# EXTRA√á√ÉO DE PRODUTOS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

class ProdutoExtractor:
    """Extrai e processa produtos do HTML"""
    
    @staticmethod
    def extrair_produtos(soup: BeautifulSoup, pagina_num: int) -> List[Dict]:
        """Extrai produtos usando m√∫ltiplas estrat√©gias"""
        
        logger.info(f"Extraindo produtos da p√°gina {pagina_num}")
        
        estrategias = [
            ("li.ui-search-layout__item", "Layout padr√£o"),
            ("div.ui-search-result__wrapper", "Wrapper"),
            ("div.ui-search-result", "Result div"),
            ("ol.ui-search-layout li", "Lista direta"),
            ("article", "Articles"),
            ("div[class*='ui-search']", "Divs com ui-search"),
        ]
        
        items = []
        
        for seletor, descricao in estrategias:
            items = soup.select(seletor)
            logger.info(f"üîç Testando '{descricao}' ({seletor}): {len(items)} elementos")
            if items:
                logger.info(f"‚úÖ Estrat√©gia '{descricao}': {len(items)} produtos")
                break
        
        if not items:
            logger.error("‚ùå Nenhum produto encontrado com nenhuma estrat√©gia")
            
            # DEBUG: An√°lise adicional
            logger.info("üîç Analisando estrutura da p√°gina...")
            
            # Verificar t√≠tulo da p√°gina
            title = soup.find('title')
            if title:
                logger.info(f"üìÑ T√≠tulo da p√°gina: {title.get_text()[:100]}")
            
            # Procurar por mensagens de erro
            error_msgs = soup.find_all(string=re.compile(r'nenhum|sem resultado|n√£o encontrado', re.I))
            if error_msgs:
                logger.warning(f"‚ö†Ô∏è Mensagens encontradas: {[msg[:50] for msg in error_msgs[:3]]}")
            
            # Contar todas as tags principais
            all_divs = soup.find_all('div')
            all_links = soup.find_all('a')
            logger.info(f"üìä Total na p√°gina: {len(all_divs)} divs, {len(all_links)} links")
            
            # Verificar se h√° produtos em formato diferente
            possible_products = soup.find_all('a', href=re.compile(r'/MLB-'))
            logger.info(f"üîó Links com /MLB- encontrados: {len(possible_products)}")
            
            if possible_products:
                logger.info("üí° Produtos detectados em formato alternativo, tentando extra√ß√£o...")
                items = possible_products[:50]  # Limitar a 50
            else:
                return []
        
        produtos = []
        offset = (pagina_num - 1) * CONFIG['produtos_por_pagina']
        
        for idx, item in enumerate(items, start=1):
            try:
                produto = ProdutoExtractor._extrair_produto(item, offset + idx)
                if produto:
                    produtos.append(produto)
            except:
                continue
        
        logger.info(f"üì¶ {len(produtos)} produtos extra√≠dos")
        return produtos
    
    @staticmethod
    def _extrair_produto(elemento, posicao: int) -> Optional[Dict]:
        """Extrai dados de um √∫nico produto"""
        
        # Encontrar link
        link_elem = elemento.find('a', class_='ui-search-link') or elemento.find('a', href=True)
        if not link_elem:
            return None
        
        # Extrair t√≠tulo
        titulo = link_elem.get('title', '').strip() or link_elem.get_text(strip=True)
        link = link_elem.get('href', '')
        
        if not titulo or not link:
            return None
        
        if not link.startswith('http'):
            link = urljoin('https://www.mercadolivre.com.br', link)
        
        # Extrair ID
        item_id = ''
        if match := re.search(r'MLB-?\d+', link):
            item_id = match.group(0).replace('-', '')
        
        # Filtros
        titulo_lower = titulo.lower()
        
        if any(exc in titulo_lower for exc in CONFIG['exclusoes_titulo']):
            return None
        
        if any(exc.lower() in item_id.lower() for exc in CONFIG['exclusoes_id']):
            return None
        
        if not any(term in titulo_lower for term in CONFIG['termos_obrigatorios']):
            return None
        
        # Extrair pre√ßo
        preco_str = ProdutoExtractor._extrair_preco(elemento)
        if not preco_str:
            return None
        
        preco_numerico = ProdutoExtractor._converter_preco(preco_str)
        categoria = ProdutoExtractor._categorizar(titulo)
        
        return {
            'T√≠tulo': titulo,
            'Pre√ßo': preco_str,
            'Pre√ßo_Numerico': preco_numerico,
            'Link': link,
            'Posi√ß√£o': posicao,
            'Categoria': categoria,
            'ID': item_id,
        }
    
    @staticmethod
    def _extrair_preco(elemento) -> Optional[str]:
        """Extrai pre√ßo do elemento"""
        
        fraction = elemento.find('span', class_='andes-money-amount__fraction')
        if fraction:
            fraction_text = fraction.get_text(strip=True)
            cents = elemento.find('span', class_='andes-money-amount__cents')
            cents_text = cents.get_text(strip=True) if cents else "00"
            return f"R$ {fraction_text},{cents_text}"
        
        texto = elemento.get_text()
        if match := re.search(r'R\$\s*(\d{1,3}(?:\.\d{3})*(?:,\d{2})?)', texto):
            return f"R$ {match.group(1)}"
        
        return None
    
    @staticmethod
    def _converter_preco(preco_str: str) -> float:
        """Converte string de pre√ßo para float"""
        try:
            return float(preco_str.replace("R$", "").replace(".", "").replace(",", ".").strip())
        except:
            return float('inf')
    
    @staticmethod
    def _categorizar(titulo: str) -> str:
        """Categoriza produto pelo t√≠tulo"""
        titulo_lower = titulo.lower()
        
        if "mc donalds" not in titulo_lower and "mcdonald" not in titulo_lower:
            return 'Desconhecido'
        
        is_dupla = any(p in titulo_lower for p in CONFIG['padroes_dupla'])
        is_vermelha = any(p in titulo_lower for p in CONFIG['padroes_vermelho'])
        is_preta = any(p in titulo_lower for p in CONFIG['padroes_preto'])
        
        if is_dupla:
            return '2un'
        elif is_vermelha and is_preta:
            return 'Vermelha' if "vermelho" in titulo_lower else 'Preta'
        elif is_vermelha:
            return 'Vermelha'
        elif is_preta:
            return 'Preta'
        else:
            return 'Desconhecido'

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# BUSCA PRINCIPAL
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def buscar_produtos(scraper: MercadoLivreScraper) -> List[Dict]:
    """Busca produtos no Mercado Livre"""
    
    logger.info("="*80)
    logger.info("INICIANDO BUSCA DE PRODUTOS")
    logger.info("="*80)
    
    todos_produtos = []
    
    for pagina in range(1, CONFIG['max_paginas'] + 1):
        logger.info("")
        logger.info(f"‚îÅ‚îÅ‚îÅ P√ÅGINA {pagina}/{CONFIG['max_paginas']} ‚îÅ‚îÅ‚îÅ")
        
        if pagina == 1:
            url = CONFIG['url_base']
        else:
            offset = (pagina - 1) * CONFIG['produtos_por_pagina'] + 1
            url = f"{CONFIG['url_base']}_Desde_{offset}"
        
        soup = scraper.buscar_pagina(url, pagina)
        
        if not soup:
            logger.error(f"Falha ao carregar p√°gina {pagina}")
            break
        
        produtos_pagina = ProdutoExtractor.extrair_produtos(soup, pagina)
        
        if not produtos_pagina:
            if pagina == 1:
                logger.error("Primeira p√°gina sem resultados - Abortando")
                break
            else:
                logger.info("Fim dos resultados")
                break
        
        todos_produtos.extend(produtos_pagina)
        logger.info(f"üìä Total acumulado: {len(todos_produtos)} produtos")
        
        if pagina < CONFIG['max_paginas']:
            delay = random.uniform(*CONFIG['delay_entre_paginas'])
            time.sleep(delay)
    
    return todos_produtos

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# RELAT√ìRIOS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def exibir_relatorio_console(produtos: List[Dict]):
    """Exibe relat√≥rio no console"""
    
    print("\n" + "="*100)
    print("üìä RELAT√ìRIO DE PRODUTOS")
    print("="*100)
    
    categorias = defaultdict(list)
    for p in produtos:
        categorias[p['Categoria']].append(p)
    
    for cat, itens in sorted(categorias.items()):
        print(f"\n{'‚îÄ'*100}")
        print(f"üì¶ {cat} - {len(itens)} produtos")
        print(f"{'‚îÄ'*100}")
        
        itens_ord = sorted(itens, key=lambda x: x['Pre√ßo_Numerico'])[:10]
        
        for i, p in enumerate(itens_ord, 1):
            print(f"\n{i}. {p['T√≠tulo'][:75]}")
            print(f"   üí∞ {p['Pre√ßo']}")
            print(f"   üîó {p['Link']}")

def enviar_email(produtos: List[Dict]) -> bool:
    """Envia relat√≥rio por email"""
    
    logger.info("Preparando envio de e-mail...")
    
    email = CONFIG['email_destino']
    senha = CONFIG['senha_app_destino']
    
    # HTML do email
    html = f"""
    <!DOCTYPE html>
    <html>
    <head><meta charset="UTF-8"><style>
    body{{font-family:Arial,sans-serif;background:#f5f5f5;margin:0;padding:20px}}
    .container{{max-width:1200px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1)}}
    h1{{color:#333;border-bottom:3px solid #FFD700;padding-bottom:10px}}
    h2{{color:#555;margin-top:30px;border-left:4px solid #4CAF50;padding-left:10px}}
    table{{width:100%;border-collapse:collapse;margin-top:15px}}
    th,td{{padding:12px;text-align:left;border-bottom:1px solid #ddd}}
    th{{background:#f8f8f8;font-weight:600;color:#333}}
    tr:hover{{background:#f9f9f9}}
    .btn{{display:inline-block;padding:8px 16px;background:#4CAF50;color:white;text-decoration:none;border-radius:5px;font-size:12px}}
    .btn:hover{{background:#45a049}}
    .preco{{color:#e91e63;font-weight:bold}}
    .footer{{margin-top:30px;padding-top:20px;border-top:2px solid #eee;color:#666;font-size:14px}}
    </style></head>
    <body>
    <div class="container">
    <h1>üèéÔ∏è Miniaturas F1 1/43 McDonald's</h1>
    <p><strong>Total de produtos:</strong> {len(produtos)}</p>
    <p><strong>Data da busca:</strong> {datetime.datetime.now().strftime('%d/%m/%Y √†s %H:%M')}</p>
    """
    
    categorias = defaultdict(list)
    for p in produtos:
        if p['Pre√ßo_Numerico'] < float('inf'):
            categorias[p['Categoria']].append(p)
    
    for cat, itens in sorted(categorias.items()):
        itens_ord = sorted(itens, key=lambda x: x['Pre√ßo_Numerico'])[:CONFIG['numero_itens_email']]
        
        html += f"""
        <h2>üì¶ {cat} - Top {len(itens_ord)} Melhores Pre√ßos</h2>
        <table>
        <tr>
            <th style="width:50px">Pos.</th>
            <th>Produto</th>
            <th style="width:100px">Pre√ßo</th>
            <th style="width:80px">Link</th>
        </tr>
        """
        
        for p in itens_ord:
            titulo = p['T√≠tulo'][:80] + ('...' if len(p['T√≠tulo']) > 80 else '')
            html += f"""
            <tr>
                <td style="text-align:center">{p['Posi√ß√£o']}</td>
                <td>{titulo}</td>
                <td class="preco">{p['Pre√ßo']}</td>
                <td style="text-align:center"><a href="{p['Link']}" class="btn" target="_blank">Ver</a></td>
            </tr>
            """
        
        html += "</table>"
    
    html += """
    <div class="footer">
    <strong>ü§ñ Monitor Autom√°tico de Pre√ßos</strong><br>
    Mercado Livre Brasil<br>
    Sistema integrado com auto-login
    </div>
    </div></body></html>
    """
    
    msg = EmailMessage()
    msg['Subject'] = f'üì¶ F1 McDonald\'s 1/43 - {len(produtos)} produtos encontrados'
    msg['From'] = email
    msg['To'] = email
    msg.set_content("Visualize este email em HTML para ver o relat√≥rio completo.")
    msg.add_alternative(html, subtype='html')
    
    try:
        logger.info("Conectando ao SMTP do Gmail...")
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(email, senha)
            smtp.send_message(msg)
        logger.info("‚úÖ E-mail enviado com sucesso!")
        return True
    except Exception as e:
        logger.error(f"Erro ao enviar e-mail: {e}")
        return False

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUN√á√ÉO PRINCIPAL
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def main():
    """Fun√ß√£o principal"""
    
    print("\n" + "‚ïî" + "‚ïê"*98 + "‚ïó")
    print("‚ïë" + "  üèéÔ∏è  MONITOR DE PRE√áOS F1 1/43 McDONALD'S".center(100) + "‚ïë")
    print("‚ïë" + "  Mercado Livre Brasil - v4.0 (Auto-Login)".center(100) + "‚ïë")
    print("‚ïö" + "‚ïê"*98 + "‚ïù\n")
    
    # Detectar ambiente CI
    is_ci = os.environ.get('CI') == 'true' or os.environ.get('GITHUB_ACTIONS') == 'true'
    if is_ci:
        logger.info("ü§ñ Executando em ambiente CI/CD (GitHub Actions)")
        # Criar diret√≥rio de debug
        os.makedirs('debug_temp', exist_ok=True)
    
    logger.info("Iniciando Monitor de Pre√ßos v4.0")
    
    inicio_execucao = time.time()
    
    try:
        # Criar scraper
        scraper = MercadoLivreScraper()
        
        # Buscar produtos
        produtos = buscar_produtos(scraper)
        
        # Remover duplicatas
        produtos_unicos = {}
        for p in produtos:
            if p['ID'] not in produtos_unicos:
                produtos_unicos[p['ID']] = p
        
        produtos = list(produtos_unicos.values())
        
        # Estat√≠sticas do scraper
        stats = scraper.get_stats()
        logger.info("")
        logger.info("="*80)
        logger.info("ESTAT√çSTICAS DE SCRAPING")
        logger.info("="*80)
        logger.info(f"Tentativas totais: {stats['tentativas_totais']}")
        logger.info(f"P√°ginas com sucesso: {stats['paginas_sucesso']}")
        logger.info(f"P√°ginas com falha: {stats['paginas_falha']}")
        logger.info(f"Taxa de sucesso: {stats['taxa_sucesso']}")
        
        logger.info("")
        logger.info("="*80)
        logger.info("RESULTADO FINAL")
        logger.info("="*80)
        logger.info(f"Total de produtos √∫nicos: {len(produtos)}")
        
        if len(produtos) == 0:
            logger.warning("NENHUM PRODUTO ENCONTRADO")
            print("\n" + "="*100)
            print("‚ö†Ô∏è  NENHUM PRODUTO ENCONTRADO")
            print("="*100)
            print("\nüí° Poss√≠veis causas:")
            print("   1. Mercado Livre bloqueando requisi√ß√µes")
            print("   2. Nenhum produto dispon√≠vel no momento")
            print("   3. Filtros muito restritivos")
            return
        
        # Estat√≠sticas por categoria
        categorias_stats = defaultdict(int)
        precos_por_categoria = defaultdict(list)
        
        for p in produtos:
            categorias_stats[p['Categoria']] += 1
            if p['Pre√ßo_Numerico'] < float('inf'):
                precos_por_categoria[p['Categoria']].append(p['Pre√ßo_Numerico'])
        
        logger.info("")
        logger.info("DISTRIBUI√á√ÉO POR CATEGORIA:")
        for cat in sorted(categorias_stats.keys()):
            qtd = categorias_stats[cat]
            precos = precos_por_categoria[cat]
            if precos:
                media = sum(precos) / len(precos)
                minimo = min(precos)
                logger.info(f"  {cat}: {qtd} produtos | M√©dia: R$ {media:.2f} | M√≠nimo: R$ {minimo:.2f}")
            else:
                logger.info(f"  {cat}: {qtd} produtos")
        
        # Salvar resultados completos para CI
        if is_ci and len(produtos) > 0:
            results_file = 'debug_temp/resultados.json'
            with open(results_file, 'w', encoding='utf-8') as f:
                json.dump({
                    'total_produtos': len(produtos),
                    'categorias': {cat: qtd for cat, qtd in categorias_stats.items()},
                    'produtos': produtos[:10],  # Apenas top 10
                    'stats': stats,
                    'timestamp': datetime.datetime.now().isoformat()
                }, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ Resultados salvos em: {results_file}")
        
        # Exibir relat√≥rio
        exibir_relatorio_console(produtos)
        
        # Top produtos mais baratos
        produtos_validos = [p for p in produtos if p['Pre√ßo_Numerico'] < float('inf')]
        if produtos_validos:
            top_baratos = sorted(produtos_validos, key=lambda x: x['Pre√ßo_Numerico'])[:5]
            
            print("\n" + "="*100)
            print("üèÜ TOP 5 PRODUTOS MAIS BARATOS")
            print("="*100)
            
            for i, p in enumerate(top_baratos, 1):
                print(f"\n{i}¬∫ - {p['T√≠tulo'][:70]}")
                print(f"    üí∞ {p['Pre√ßo']} | üè∑Ô∏è  {p['Categoria']}")
                print(f"    üîó {p['Link']}")
        
        # Enviar email
        print("\n" + "="*100)
        print("üìß ENVIANDO RELAT√ìRIO POR E-MAIL")
        print("="*100)
        
        email_enviado = enviar_email(produtos)
        
        # Tempo de execu√ß√£o
        duracao = time.time() - inicio_execucao
        
        # Sum√°rio final
        print("\n" + "‚ïî" + "‚ïê"*98 + "‚ïó")
        print("‚ïë" + " "*100 + "‚ïë")
        
        if email_enviado:
            print("‚ïë" + "  ‚úÖ PROCESSO CONCLU√çDO COM SUCESSO!".center(100) + "‚ïë")
        else:
            print("‚ïë" + "  ‚ö†Ô∏è  PROCESSO CONCLU√çDO (erro no e-mail)".center(100) + "‚ïë")
        
        print("‚ïë" + " "*100 + "‚ïë")
        print("‚ïë" + f"  üìä {len(produtos)} produtos processados".center(100) + "‚ïë")
        print("‚ïë" + f"  üìß E-mail: {'Enviado' if email_enviado else 'Falhou'}".center(100) + "‚ïë")
        print("‚ïë" + f"  ‚è±Ô∏è  Tempo: {duracao:.1f}s".center(100) + "‚ïë")
        print("‚ïë" + " "*100 + "‚ïë")
        print("‚ïö" + "‚ïê"*98 + "‚ïù\n")
        
        logger.info(f"Execu√ß√£o conclu√≠da em {duracao:.1f} segundos")
        logger.info(f"Produtos processados: {len(produtos)}")
        logger.info(f"E-mail enviado: {'Sim' if email_enviado else 'N√£o'}")
        
        # Fechar recursos
        scraper.fechar()
        
    except KeyboardInterrupt:
        logger.warning("Execu√ß√£o interrompida pelo usu√°rio")
        print("\n\n‚ö†Ô∏è  Execu√ß√£o interrompida pelo usu√°rio")
        print("üëã At√© logo!\n")
        
    except Exception as e:
        logger.critical(f"ERRO CR√çTICO: {e}")
        print("\n" + "="*100)
        print("‚ùå ERRO CR√çTICO")
        print("="*100)
        print(f"\n{e}\n")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PONTO DE ENTRADA
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

if __name__ == "__main__":
    main()
